The java code here is for discover hosts in a network.

1. Prerequisite:
nmap must be installed in your system, and it is in the path of execution.


2. NMap.java
This is the key class for discovering hosts in network.

It has two import APIs: readXMLFile, and runCommand, both return an list of hosts.

2.1. runCommand method obtains its result by running the nmap command, "nmap -O -F -oX <filen> <target>". 
It takes a while to run, 2 minutes for a class C network.

2.2. readXMLFile obtains its result by reading an xml file generated by running -O -F -oX <file> <target>" before hand.
This is much faster.

2.3. Running test
NMap.java has a Main entry point, which allows your to test it out to use either method.
Example:
     java NMap -f www.microsoft.com.xml
will use the NMap.readXMLFile to generate the result.

     java NMap -n www.microsoft.com/24
will use the  NMap.runCommmand method to generate method.

There one thing to note on using NMap.runCommand method. It requires root privilege to run "nmap -O" option, the
option to detect OS in the hosts. So you need to run "java NMap -n <target>" in privileged mode:
     sudo java NMap -n www.microsoft.com/24
      

3. Host.java
This class defines the data model of a host. Currently, it contains three attributes: address, name, and os.


4. Discover.java
This is the interface for network discovery. Currently, it has only one method: discover.

5. Shell.java
Shell class is used to execute system command, such as nmap.

6. JRun.java
JRun is used to test Shell class. You can use it to run any command.
Example:
  java JRun ls /
will run 'ls /' shell command.


7. *.xml
There are some xml files, which are obintained by running "nmap -O -F -oX <filen> <target>".
They are used to test NMap.readXMLFile method.
